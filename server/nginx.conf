events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    error_log /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;

    upstream rest_backend {
        server localhost:8000;
    }

    upstream websocket_backend {
        server localhost:8001;
    }

    upstream grpc_backend {
        server localhost:50051;
        keepalive 32;
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    ##########################################################
    # üîπ ÏÑúÎ≤Ñ 1: gRPC + REST (HTTP/2, 8080 Ìè¨Ìä∏)
    ##########################################################
    server {
        listen 443 ssl http2;
        server_name go.signorder.kr;

        ssl_certificate     /etc/letsencrypt/live/go.signorder.kr/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/go.signorder.kr/privkey.pem;

        # REST API
        location /api/ {
            rewrite ^/api/(.*) /$1 break;
            proxy_pass http://rest_backend;

            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, api-key" always;

            if ($request_method = OPTIONS) {
                return 204;
            }

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header api-key $http_api_key;
        }

        # gRPC
        location /APIService {
            grpc_pass grpc://grpc_backend;
            grpc_set_header Host $host;
            grpc_set_header X-Real-IP $remote_addr;
            grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            grpc_set_header X-Forwarded-Proto $scheme;
            grpc_set_header api-key $http_api_key;
            grpc_read_timeout 300s;
            grpc_send_timeout 300s;
            grpc_connect_timeout 75s;

            error_page 502 = @error502;
            error_page 503 = @error503;
        }

        location @error502 {
            add_header Content-Type application/json;
            return 502 '{"error": "Bad Gateway", "message": "gRPC server is unavailable"}';
        }

        location @error503 {
            add_header Content-Type application/json;
            return 503 '{"error": "Service Unavailable", "message": "gRPC server is temporarily unavailable"}';
        }

        location /ws {
            proxy_pass http://websocket_backend;
            proxy_http_version 1.1;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_set_header api-key $http_api_key;

            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            proxy_connect_timeout 75s;
        }
    }
    server {
        listen 80;
        server_name go.signorder.kr;

        # REST API
        location /api/ {
            rewrite ^/api/(.*) /$1 break;
            proxy_pass http://rest_backend;

            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, api-key" always;

            if ($request_method = OPTIONS) {
                return 204;
            }

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header api-key $http_api_key;
        }

        # gRPC
        location /APIService {
            grpc_pass grpc://grpc_backend;
            grpc_set_header Host $host;
            grpc_set_header X-Real-IP $remote_addr;
            grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            grpc_set_header X-Forwarded-Proto $scheme;
            grpc_set_header api-key $http_api_key;
            grpc_read_timeout 300s;
            grpc_send_timeout 300s;
            grpc_connect_timeout 75s;

            error_page 502 = @error502;
            error_page 503 = @error503;
        }

        location @error502 {
            add_header Content-Type application/json;
            return 502 '{"error": "Bad Gateway", "message": "gRPC server is unavailable"}';
        }

        location @error503 {
            add_header Content-Type application/json;
            return 503 '{"error": "Service Unavailable", "message": "gRPC server is temporarily unavailable"}';
        }

        location /ws {
            proxy_pass http://websocket_backend;
            proxy_http_version 1.1;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_set_header api-key $http_api_key;

            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            proxy_connect_timeout 75s;
        }
    }
}
